#!/usr/bin/env python
# This script generate ww3_grid.inp
#
#  Qing Li, 20170305

import sys
import os

def main():
    """
    """
    # check input
    gridlist = ('gx37', 'gx16', 'gx17', 'tx0.1v3')
    gstrg = {'gx37': 'CURV', 'gx16': 'CURV', 'gx17': 'CURV', 'tx0.1v3': 'CURV' }
    flagll = {'gx37': 'T', 'gx16': 'T', 'gx17': 'T','tx0.1v3': 'T' }
    cstrg = {'gx37': 'SMPL', 'gx16': 'SMPL', 'gx17': 'SMPL', 'tx0.1v3': 'SMPL'}
    nx = {'gx37': 100, 'gx16': 320, 'gx17': 320, 'tx0.1v3': 3600}
    ny = {'gx37': 116, 'gx16': 384, 'gx17': 384, 'tx0.1v3': 2400}
    varargin = sys.argv
    narg = len(varargin)
    if narg != 2:
        raise ValueError('Require 1 argument, got {}.'.format(narg-1))
    gridtype = varargin[1]
    if gridtype not in gridlist:
        raise ValueError('Input grid type {} not supported'.format(gridtype))

    # write to file
    inppath = './grid_inp'
    ofilename = inppath+'/'+'ww3_grid.inp.'+gridtype
    nmlfile = 'ww3_grid_namelist.inp'
    outfile = open(ofilename, 'w')
    write_start(outfile)
    write_gridname(outfile, gridtype)
    write_frequency(outfile, 1.1, 0.04118, 25, 24, 0)
    write_flag(outfile, 'F', 'T', 'T', 'T', 'F', 'T')
    write_timestep(outfile, 1800, 1800, 1800, 300)
    write_namelist(outfile)
    write_grid(outfile, gstrg[gridtype], flagll[gridtype], cstrg[gridtype], nx[gridtype], ny[gridtype])
    write_end(outfile)
    outfile.close()

def write_blank(outfile):
    """
    Write a blank line start with '$' to file
    """
    outfile.write('$\n')

def write_line(outfile):
    """
    Write a line '$ ---- $' to file
    """
    line_str = '$ -------------------------------------------------------------------- $\n'
    outfile.write(line_str)

def write_start(outfile):
    """
    Write start string to file
    """
    write_line(outfile)
    start_str = '$ WAVEWATCH III Grid preprocessor input file                           $\n'
    outfile.write(start_str)
    write_line(outfile)
    write_blank(outfile)

def write_end(outfile):
    """
    Write start string to file
    """
    write_blank(outfile)
    write_line(outfile)
    end_str = '$ End of input file                                                    $\n'
    outfile.write(end_str)
    write_line(outfile)

def write_gridname(outfile, gridname):
    """
    Write grid name to file
    """
    gname_cmt = '$ Grid name (C*30, in quotes)\n'
    outfile.write(gname_cmt)
    gname_str = '  \'{:30s}\'\n'.format(gridname)
    write_blank(outfile)
    outfile.write(gname_str)
    write_blank(outfile)

def write_frequency(outfile, icf, ifreq, nf, nd, offset):
    """
    Write frequncy to file
    """
    freq_cmt = '$ Frequency increment factor and first frequency (Hz) ---------------- $\n' \
             + '$ number of frequencies (wavenumbers) and directions, relative offset\n' \
             + '$ of first direction in terms of the directional increment [-0.5,0.5].\n'
    outfile.write(freq_cmt)
    write_blank(outfile)
    freq_str = ' {:4.1f} {:8.5f} {:3d} {:3d} {:4.1f}\n'.format(icf, ifreq, nf, nd, offset)
    outfile.write(freq_str)
    write_blank(outfile)

def write_flag(outfile, fldry, flcx, flcy, flcth, flck, flsou):
    """
    Write model flags to file
    """
    flag_cmt = '$ Set model flags ---------------------------------------------------- $\n' \
             + '$  - FLDRY         Dry run (input/output only, no calculation).\n' \
             + '$  - FLCX, FLCY    Activate X and Y component of propagation.\n' \
             + '$  - FLCTH, FLCK   Activate direction and wavenumber shifts.\n' \
             + '$  - FLSOU         Activate source terms.\n'
    outfile.write(flag_cmt)
    flag_str = '  {:2s} {:2s} {:2s} {:2s} {:2s} {:2s}\n'.format(fldry, flcx, flcy, flcth, flck, flsou)
    outfile.write(flag_str)
    write_blank(outfile)

def write_timestep(outfile, maxg, maxcflxy, maxcflkth, minsou):
    """
    Write time step to file
    """
    tstep_cmt = '$ Set time steps ----------------------------------------------------- $\n' \
              + '$ - Time step information (this information is always read)\n' \
              + '$     maximum global time step, maximum CFL time step for x-y and\n' \
              + '$     k-theta, minimum source term time step (all in seconds).\n'
    outfile.write(tstep_cmt)
    write_blank(outfile)
    tstep_str = ' {:8.2f} {:8.2f} {:8.2f} {:8.2f}\n'.format(maxg, maxcflxy, maxcflkth, minsou)
    outfile.write(tstep_str)
    write_blank(outfile)

def write_namelist(outfile, *arg):
    """
    Write namelist to file
    """
    if len(arg) == 1:
        nmlfile = arg
        if os.path.isfile(nmlfile):
            for line in open(nmlfile, 'r'):
                outfile.write(line)
        else:
            print('Namelist file {} does not exist.\n'.format(nmlfile))
            sys.exit(1)
    else:
        nml_cmt = '$ Start of namelist input section ------------------------------------ $\n' \
                + '$\n' \
                + 'END OF NAMELISTS\n' \
                + '$\n'
        outfile.write(nml_cmt)

def write_grid(outfile, gstrg, flagll, cstrg, nx, ny):
    """
    Write grid information to file
    """
    grid_cmt = '$ Define grid -------------------------------------------------------- $\n'
    outfile.write(grid_cmt)
    write_blank(outfile)
    grid_str1 = '  \'{}\'  {}  \'{}\'\n'.format(gstrg, flagll, cstrg)
    outfile.write(grid_str1)
    grid_str2 = '  {}  {}\n'.format(nx, ny)
    outfile.write(grid_str2)


if __name__ == "__main__":
    main()
